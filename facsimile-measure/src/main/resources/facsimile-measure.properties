# Facsimile -- A Discrete-Event Simulation Library
# Copyright \u00A9 2004-2016, Michael J Allen.
#
# This file is part of Facsimile.
#
# Facsimile is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# Facsimile is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License along with Facsimile. If not, see
# http://www.gnu.org/licenses/lgpl.
#
# The developers welcome all comments, suggestions and offers of assistance. For further information, please visit the
# project home page at:
#
#   http://facsim.org/
#
# Thank you for your interest in the Facsimile project!
#
# IMPORTANT NOTE: All patches (modifications to existing files and/or the addition of new files) submitted for inclusion
# as part of the official Facsimile code base, must comply with the published Facsimile Coding Standards. If your code
# fails to comply with the standard, then your patches will be rejected. For further information, please visit the
# coding standards at:
#
#   http://facsim.org/Documentation/CodingStandards/
#=======================================================================================================================
# Resource bundle properties file (en_US locale) for the Facsimile library.
#
# NOTE: This file is ISO-8859-1 encoded NOT UTF-8 encoded. When inserting special characters, they MUST be entered as
# the equivalent Unicode escape sequence (of the form \uHHHH, where "HHHH" is four hexadecimal characters).
#
# For the syntax of this file, refer to:
#
#   http://docs.oracle.com/javase/6/docs/api/java/text/MessageFormat.html
#
# Each section in this file must correspond to a Java/Scala package. Each section must be named for the corresponding
# package name, after the prefix "org.facsim.measure." has been removed. For example, the package "org.facsim.measure.x"
# will be named "x". (The root package is regarded as having an empty name.)
#
# Sections must be listed in alphabetical, hierarchical order. For example:
#
#   {empty}
#   a
#   a.a
#   a.b
#   a.b.a
#   b
#
# Resource keys must be named as follows:
#
# sectionName.elementName[.propertyName]
#
# where "sectionName" is the section name and "elementName" is the name of class, object, trait or function to which the
# resource key belongs.
#
# If the associated element's name ends in "Exception", then that suffix should be removed from the corresponding
# resource key name. For example, if exception class org.facsim.measure.somepackage.SomeException requires an error
# message resource key, then that key would likely be called "somepackage.Some".
#
# Elements that require, or that potentially require, multiple resource keys must append a unique propertyName
# identifier (see above) to each resource key name.
#
# Within each section, resource keys must be listed in alphabetical, hierarchical order. For example, resource keys in
# package "x" would be listed as follows:
#
#   x.ClassA
#   x.ClassB.propertyA
#   x.ClassB.propertyB
#   x.ClassC
#
# Alphabetical, hierarchical ordering of sections and resource keys assists with maintenance and organization -
# particularly for large resource files.
#=======================================================================================================================

#=======================================================================================================================
# org.facsim.measure package resources.
#=======================================================================================================================

# Symbol for plane angles measured in degrees.
#
# Note: The sequence \u00B0 identifies the degree symbol.

Angle.Degree.sym = \u00B0

# Symbol for plane angles measured in gradians.

Angle.Gradian.sym = gon

# Symbol for plane angles measured in radians.

Angle.Radian.sym = rad

# Symbol for plane angles measured in turns.

Angle.Turn.sym = rev

# Symbol for electric currents measured in amperes.

Current.Ampere.sym = A

# Format for outputting measurements in generic units.
# Arguments:
#   0 Value of the measurement to be output, as a floating point value.
#   1 Units in which the measurement is expressed.

Generic.Units.format = {0,number}{1}

# Generic measurement conversion exception message.
# Arguments:
#   0 Generic measurement value, in preferred units, that could not be converted.
#   1 Family with which the generic value is associated.
#   2 Family to which the value failed to be converted to.

GenericConversion = Attempt to convert "{1}" value (of {0}) to "{2}" failed.

# Symbol for lengths measured in centimeters.

Length.Centimeter.sym = cm

# Symbol for lengths measured in feet.

Length.Foot.sym = ft

# Symbol for lengths measured in inches.

Length.Inch.sym = in

# Symbol for lengths measured in kilometers.

Length.Kilometer.sym = km

# Symbol for lengths measured in meters.

Length.Meter.sym = m

# Symbol for lengths measured in miles.

Length.Mile.sym = mi

# Symbol for lengths measured in millimeters.

Length.Millimeter.sym = mm

# Symbol for lengths measured in yards.

Length.Yard.sym = yd

# Symbol for luminous intensity measured in candelas.

LuminousIntensity.Candela.sym = cd

# Symbol for mass measured in grams.

Mass.Gram.sym = g

# Symbol for mass measured in kilograms.

Mass.Kilogram.sym = kg

# Symbol for mass measured in milligrams.

Mass.Milligram.sym = mg

# Symbol for mass measured in ounces.

Mass.Ounce.sym = oz

# Symbol for mass measured in pounds.

Mass.Pound.sym = lb

# Symbol for mass measured in (metric) tonnes.

Mass.Tonne.sym = t

# Format for outputting measurements in specified units.
# Arguments:
#   0 Value of the measurement to be output, as a floating point value.
#   1 Units in which the measurement is expressed.

Physical.Units.format = {0,number}{1}

# Symbol for temperature measured in degrees Celsius.
#
# Note: The sequence \u00B0 identifies the degree symbol.

Temperature.Celsius.sym = \u00B0C

# Symbol for temperature measured in degrees Fahrenheit.
#
# Note: The sequence \u00B0 identifies the degree symbol.

Temperature.Fahrenheit.sym = \u00B0F

# Symbol for temperature measured in degrees Kelvin.

Temperature.Kelvin.sym = K

# Symbol for time measured in days.

Time.Day.sym = d

# Symbol for time measured in hours.

Time.Hour.sym = h

# Symbol for time measured in milliseconds.

Time.Millisecond.sym = ms

# Symbol for time measured in minutes.

Time.Minute.sym = min

# Symbol for time measured in seconds.

Time.Second.sym = s

# Symbol for time measured in weeks.

Time.Week.sym = wk