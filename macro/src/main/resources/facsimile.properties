# Facsimile -- A Discrete-Event Simulation Library
# Copyright Â© 2004-2013, Michael J Allen.
#
# This file is part of Facsimile.
#
# Facsimile is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# Facsimile is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Facsimile.  If not, see http://www.gnu.org/licenses/lgpl.
#
# The developers welcome all comments, suggestions and offers of assistance.
# For further information, please visit the project home page at:
#
#   http://facsim.org/
#
# Thank you for your interest in the Facsimile project!
#
# IMPORTANT NOTE: All patches (modifications to existing files and/or the
# addition of new files) submitted for inclusion as part of the official
# Facsimile code base, must comply with the published Facsimile Coding
# Standards.  If your code fails to comply with the standard, then your patches
# will be rejected.  For further information, please visit the coding standards
# at:
#
#   http://facsim.org/Documentation/CodingStandards/
#==============================================================================
# Resource bundle properties file (en_US locale) for the Facsimile library.
#
# NOTE: This file is ISO-8859-1 encoded NOT UTF-8 encoded.  When inserting
# special characters, they MUST be entered as the equivalent Unicode escape
# sequence (of the form \uHHHH, where "HHHH" is four hexadecimal characters).
#
# For the syntax of this file, refer to:
#
#   http://docs.oracle.com/javase/6/docs/api/java/text/MessageFormat.html
#
# Each section in this file must correspond to a Java/Scala package.  Each
# section must be named for the corresponding package name, after the prefix
# "org.facsim." has been removed.  For example, the package "org.facsim.x" will
# be named "x".  (The root package is regarded as having an empty name.)
#
# Sections must be listed in alphabetical, hierarchical order.  For example:
#
#   {empty}
#   a
#   a.a
#   a.b
#   a.b.a
#   b
#
# Resource keys must be named as follows:
#
# sectionName.elementName[.propertyName]
#
# where "sectionName" is the section name and "elementName" is the name of
# class, object, trait or function to which the resource key belongs.
#
# If the associated element's name ends in "Exception", then that suffix should
# be removed from the corresponding resource key name.  For example, if
# exception class org.facsim.somepackage.SomeException requires an error
# message resource key, then that key would likely be called
# "somepackage.Some".
#
# Elements that require, or that potentially require, multiple resource keys
# must append a unique propertyName identifier (see above) to each resource key
# name.
#
# Within each section, resource keys must be listed in alphabetical,
# hierarchical order.  For example, resource keys in package "x" would be
# listed as follows:
#
#   x.ClassA
#   x.ClassB.propertyA
#   x.ClassB.propertyB
#   x.ClassC
#
# Alphabetical, hierarchical ordering of sections and resource keys assists
# with maintenance and organization - particularly for large resource files.
#==============================================================================

#==============================================================================
# org.facsim package resources.
#==============================================================================

# Behavior CopyrightBasic message.
# Arguments:
#   0 Copyright holder name.  Any trailing period ('.') must be removed before
#     being passed in.
#   1 Inception date.
#
# NOTE: The sequence \u00A9 identifies the copyright symbol.

Behavior.CopyrightBasic = Copyright \u00A9 {1,date,yyyy}, {0}.

# Behavior CopyrightRange message.
# Arguments:
#   0 Copyright holder name.  Any trailing period ('.') must be removed before
#     being passed in.
#   1 Inception date.
#   2 Release date.
#
# Note: The sequence \u00A9 identifies the copyright symbol.

Behavior.CopyrightRange = Copyright \u00A9 {1,date,yyyy}-{2,date,yyyy}, {0}.

# Behavior NoSuchElementException message.
# Arguments:
#   0 Name of element that was missing.

Behavior.NoSuchElement = Behavior element not implemented: "{0}"

# BehaviorRedefinitionException message.
# Arguments:
#   0 String form of existing behavior.
#   1 String form of new behavior.

BehaviorRedefined = Attempt to override existing behavior ("{0}") with new \
behavior ("{1}") failed.

# BehaviorUndefinedException message.

BehaviorUndefined = Attempt to access org.facsim.App behavior failed because \
no org.facsim.Behavior instance been been applied.

# DeprecatedException message.
# Arguments:
#   0 String identifying feature that failed.

Deprecated = Use of "{0}" is deprecated. Refer to the corresponding \
ScalaDoc documentation for further information.

# Require finite double value argument failure message:
# Arguments:
#   0 Name of argument found to have non-finite value.
#   1 Illegal argument value as a choice value (0=Nan, 1=infinity,
#     2=-infinity).
#
# Note: The sequence \u221E identifies the inifinity symbol.

requireFinite = Argument "{0}" must be finite, but has value \
"{1,choice,0#NaN|1#\u221E|2#-\u221E}".

# Require non-null argument failure message:
# Arguments:
#   0 Name of argument found to be null.

requireNonNull = Argument "{0}" cannot be null.

# Require valid argument failure message:
# Arguments:
#   0 Name of argument found to be invalid.
#   1 Illegal argument's value as a string.

requireValid = Argument "{0}" has illegal value: "{1}".

# SafeNone.get exception message.
# Note: A NoSuchElementException is always thrown by this function.

SafeNone.get = SafeNone has no value to get.

#==============================================================================
# org.facsim.anim package resources.
#==============================================================================

#==============================================================================
# org.facsim.anim.cell package resources.
#==============================================================================

# Description of bounding box maximum coordinate field.
# Arguments:
#   0 Associated axis: 0=X, 1=Y, 2=Z.
#   1 Value that maximum bound must be greater than or equal to.
#
# Note: The sequence \u2265 identifies the greater-than-or-equal-to symbol.

anim.cell.BoundingBox.read.max = bounding box maximum {0,choice,0#X|1#Y|2#Z} \
coordinate (double). Value must be finite and \u2265 {1,number} (minimum \
{0,choice,0#X|1#Y|2#Z} coordinate value).

# Description of bounding box minimum coordinate field.
# Arguments:
#   0 Associated axis: 0=X, 1=Y, 2=Z.

anim.cell.BoundingBox.read.min = bounding box minimum {0,choice,0#X|1#Y|2#Z} \
coordinate (double). Value must be finite.

# Description of cell color code field.
# Arguments:
#   0 Type of color (0 = face, 1= edge) being read.
#   1 Minimum color code.
#   2 Maximum color code.

anim.cell.CellColor.read = cell {0,choice,0#face|1#edge} color code \
(integer). Value must be in range [{1,number,integer}, {2,number,integer}].

# Description of cell flag field.

anim.cell.CellFlags.read = cell flags (integer).

# Description of cell type code field:
#   0 Integer choice value indicating whether the attempt was to read regular
#     (0) or definition (1) cell codes.
#   1 String storing list of acceptable values

anim.cell.CellScene.readNextCell.cellCodeDesc = \
{0,choice,0#regular|1#definition} cell code (integer). Value must be one of: \
{1}.
 
# Exception explanation for reading an unconstrained value from a cell file.
# Arguments:
#   0 Description of value being read.

anim.cell.CellScene.readValue = Failed in attempt to read {0}

# Description of the cone dimensions.
#   0 Associated dimension: 0=base radius (X-Y plane), 1=height (z-dimension).
#
# Note: The sequence \u2265 identifies the greater-than-or-equal-to symbol.

anim.cell.Cone.readDim = cone {0,choice,0#base radius (X-Y plane)|1#height \
(Z) dimension} (double). Value must be finite and \u2265 0.0.

# Description of the cone top offsets.
#   0 Associated offset: 0=X-axis, 1=Y-axis.

anim.cell.Cone.readOffset = cone top {0,choice,0#X|1#Y}-axis offset (double). \
Value must be finite.

# Description of the conic frustum dimensions.
#   0 Associated dimension: 0=base radius (X-Y plane), 1=top radius (Y-Y plane)
#     2=height (z-dimension).
#
# Note: The sequence \u2265 identifies the greater-than-or-equal-to symbol.

anim.cell.Cone.readDim = conic frustum {0,choice,0#base radius (X-Y plane)|1#\
top radius (X-Y plane)|2#height (Z) dimension} (double). Value must be finite \
and \u2265 0.0.

# Description of the conic frustum top offsets.
#   0 Associated offset: 0=X-axis, 1=Y-axis.

anim.cell.Cone.readOffset = conic frustum top {0,choice,0#X|1#Y}-axis offset \
(double). Value must be finite.

# Description of the cylinder dimensions.
#   0 Associated dimension: 0=radius (X-Y plane), 1=height (z-dimension).
#
# Note: The sequence \u2265 identifies the greater-than-or-equal-to symbol.

anim.cell.Cylinder.readDim = cylinder {0,choice,0#radius (X-Y plane)|1#height \
(Z) dimension} (double). Value must be finite and \u2265 0.0.

# Description of the cylinder top offsets.
#   0 Associated offset: 0=X-axis, 1=Y-axis.

anim.cell.Cylinder.readOffset = cylinder top {0,choice,0#X|1#Y}-axis offset \
(double). Value must be finite.

# Description of cell display style code field.
# Arguments:
#   0 Minimum display style code.
#   1 Maximum display style code.

anim.cell.DisplayStyle.read = cell display style code (integer). Value must \
be in range [{0,number,integer}, {1,number,integer}].

# Description of the joint geometry terminator field.

anim.cell.Joint.terminator = joint geometry terminator (integer). Value must \
be 0.

# Description of cell joint current value.
# Arguments:
#   0 Minimum permitted value.
#   1 Maximum permitted value.

anim.cell.JointData.cur = joint current value (double). Value must be in \
range [{0,number}, {1,number}] (defined by joint minimum & maximum values).

# Description of cell joint maximum value.
# Arguments:
#   0 Minimum permitted value.
#
# Note: The sequence \u2265 identifies the greater-than-or-equal-to symbol.

anim.cell.JointData.max = joint maximum value (double). Value must be finite \
and \u2265 {0,number} (joint minimum value).

# Description of cell joint minimum value.

anim.cell.JointData.min = joint minimum value (double). Value must be finite.

# Description of cell joint speed data.
#
# Note: The sequence \u2265 identifies the greater-than-or-equal-to symbol.

anim.cell.JointData.speed = joint speed (double). Value must be finite and \
\u2265 0.0.

# Description of TCF data present flag.

anim.cell.JointData.tcfPresent = TCF data present (boolean). Value must be 0 \
(false) or 1 (true).

# Description of cell joint type code field.
# Arguments:
#   0 Minimum joint type code.
#   1 Maximum joint type code.

anim.cell.JointType.read = cell joint type code (integer). Value must be in \
range [{0,number,integer}, {1,number,integer}].

# Description of cell line style code field.
# Arguments:
#   0 Minimum line style code.
#   1 Maximum line style code.

anim.cell.LineStyle.read = cell line style code (integer). Value must be in \
range [{0,number,integer}, {1,number,integer}].

# Description of cell line width field.
# Arguments:
#   0 Minimum line width.
#   1 Maximum line width.

anim.cell.LineWidth.read = cell line width (integer). Value must be in range \
[{0,number,integer}, {1,number,integer}]. Values other than 1 are not \
recommended.

# Description of axis rotation order code field.
# Arguments:
#   0 Minimum axis rotation order code.
#   1 Maximum axis rotation order code.

anim.cell.RotationOrder.read = axis rotation order code (integer). Value must \
be in range \ [{0,number,integer}, {1,number,integer}].

# Description of scaling transformation along indicated axis.
# Arguments:
#   0 Associated axis: 0=X, 1=Y, 2=Z.

anim.cell.Scaling.read = {0,choice,0#X|1#Y|2#Z}-axis scaling (double). Value \
must be finite and > 0.0.

# Description of number of children in set field.
#
# Note: The sequence \u2265 identifies the greater-than-or-equal-to symbol.

anim.cell.Set.readChildren = number of children belonging to set (integer). \
Value must be \u2265 0.

# Description of translation transformation along indicated axis.
# Arguments:
#   0 Associated axis: 0=X, 1=Y, 2=Z.

anim.cell.Translation.read = {0,choice,0#X|1#Y|2#Z}-axis translation \
(double). Value must be finite.

# Description of the tetrahedron dimensions.
#   0 Associated dimension: 0=base (X-Y plane), 1=top (X-Y plane), 2=height
#     (z-dimension).
#
# Note: The sequence \u2265 identifies the greater-than-or-equal-to symbol.

anim.cell.Tetrahedron.readDim = tetrahedron {0,choice,0#base dimension (X-Y \
plane)|1#top dimension (X-Y plane)|2#height dimension (Z-axis)} (double). \
Value must be finite and \u2265 0.0.

# Description of the tetrahedron top offsets.
#   0 Associated offset: 0=X-axis, 1=Y-axis.

anim.cell.Tetrahedron.readOffset = tetrahedron top {0,choice,0#X|1#Y}-axis \
offset (double). Value must be finite.

# Description of the trapezoid dimensions.
#   0 Associated dimension: 0=base X-dimension, 1=base Y-dimension, 2=top
#     X-dimension, 3=top Y-dimension, 4=height (z-dimension).
#
# Note: The sequence \u2265 identifies the greater-than-or-equal-to symbol.

anim.cell.Trapezoid.readDim = trapezoid {0,choice,0#base Y-dimension|1#base \
X-dimension|2#top Y-dimension|3#top X-dimension|4#height (Z) dimension} \
(double). Value must be finite and \u2265 0.0.

# Description of the trapezoid top offsets.
#   0 Associated offset: 0=X-axis, 1=Y-axis.

anim.cell.Trapezoid.readOffset = trapezoid top {0,choice,0#X|1#Y}-axis offset \
(double). Value must be finite.

#==============================================================================
# org.facsim.engine package resources.
#
# THIS SECTION HAS NOT BEEN VALIDATED!
#==============================================================================

# Simulation out-of-events exception message.

engine.Simulation.OutOfEventsException.message = \
Simulation has run out of events.

# Description of NullAction operation.

engine.Simulation.NullAction.description = Simulation null action.

# Error message to be displayed if a NullAction is executed.

engine.Simulation.NullAction.executeError = \
org.facsim.facsimile.Simulation.NullAction action should never be executed.

#==============================================================================
# org.facsim.gui package resources.
#
# THIS SECTION HAS NOT BEEN VALIDATED!
#==============================================================================

# Label to be displayed inside the close button on the About dialog.

gui.About.Close = OK

# Title of the About dialog box.
# Arguments:
#   0  Application title.

gui.About.Title = About {0}

# Version of application in the About dialog box.
# Arguments:
#   0 Application version as a string.

gui.About.Version = Version: {0}

#==============================================================================
# org.facsim.inf package resources.
#
# THIS SECTION HAS NOT BEEN VALIDATED!
#==============================================================================

# Test string.
#
# This string resource is provided to assist with testing of the
# org.facsim.inf.LibResource object, and has no other
# purpose.

inf.LibResource.TestMessage = ;/xLx$Z)U^JnZ6^uqNod0Cb2sDLZc]!b

# Missing manifest data exception.
# Arguments:
#   0 Name of undefined manifest field.

inf.MissingManifestData = Missing requested JAR manifest field: "{0}"

#==============================================================================
# org.facsim.io package resources.
#==============================================================================

# Field conversion exception as thrown by the TextReader class.
# Arguments:
#   0 Row number for the start of the failed field.
#   1 Column number for the start of the failed field.
#   2 Value of field that failed conversion.
#   3 Canonical name of type to which field was being converted.

io.FieldConversion = Field conversion of value "{2}" to type "{3}" failed. \
Row: {0,number,integer}, Column: {1,number,integer}.

# Field verification exception as thrown by the TextReader class.
# Arguments:
#   0 Row number for the start of the failed field.
#   1 Column number for the start of the failed field.
#   2 Value of field that failed verification.

io.FieldVerification = Field verification of value "{2}" failed. Row: \
{0,number,integer}, Column: {1,number,integer}.

# End-of-file exception, as thrown by TextReader.
# Arguments:
#   0 Row number at which the end-of-file was detected.
#   1 Column number at which the end-of-file was detected.

io.TextReader.EOF = Attempt to read beyond end-of-file/end-of-stream. Row: \
{0,number,integer}, Column: {1,number,integer}

#==============================================================================
# org.facsim.measure package resources.
#==============================================================================

# Generic measurement conversion exception message.
# Arguments:
#   0 Generic measurement value, in preferred units, that could not be
#     converted.
#   1 Family with which the generic value is associated.
#   2 Family to which the value failed to be converted to.

measure.GenericConversion Attempt to convert {1} value (of {0}) to {2} failed.

#==============================================================================
# org.facsim.stats package resources.
#==============================================================================

# Insufficient data exception message.
# Arguments:
#   0   Name of statistic requested.
#   1   Minimum number of observations required.
#   2   Number of observations recorded.

stats.InsufficientData = {0} statistic requires {1,number,integer} \
observations, but only {2,number,integer} recorded.

# Population mean name.

stats.Names.PopulationMean = population mean

# Population mean estimate name.

stats.Names.PopulationMeanEstimate = population mean estimate

# Population standard deviation name.

stats.Names.PopulationStandardDeviation = population standard deviation

# Population standard deviation estimate name.

stats.Names.PopulationStandardDeviationEstimate = population standard \
deviation estimate

# Population variance name.

stats.Names.PopulationVariance = population variance

# Population variance estimate name.

stats.Names.PopulationVarianceEstimate = population variance estimate

# Sample maximum value symbol.

stats.Names.SampleMaximum = sample maximum

# Sample mean name (x-bar).

stats.Names.SampleMean = sample mean

# Sample minimum name.

stats.Names.SampleMinimum = sample minimum

# Sample standard deviation name.

stats.Names.SampleStandardDeviation = sample standard deviation

# Sample variance name.

stats.Names.SampleVariance = sample variance

# Population mean symbol (mu).
#
# Note: The sequence \u03BC identifies the Greek lowercase mu letter.

stats.Symbols.PopulationMean = \u03BC

# Population mean estimate symbol (mu-hat).
#
# Note: The sequence \u03BC identifies the Greek lowercase mu letter.
# Note: The sequence \u0302 identifies the combining circumflex character.

stats.Symbols.PopulationMeanEstimate = \u03BC\u0302

# Population standard deviation symbol (sigma).
#
# Note: The sequence \u03C3 identifies the Greek lowercase sigma letter.

stats.Symbols.PopulationStandardDeviation = \u03C3

# Population standard deviation estimate symbol (sigma-hat).
#
# Note: The sequence \u03C3 identifies the Greek lowercase sigma letter.
# Note: The sequence \u0302 identifies the combining circumflex character.

stats.Symbols.PopulationStandardDeviationEstimate = \u03C3\u0302

# Population variance symbol (sigma-squared).
#
# Note: The sequence \u03C3 identifies the Greek lowercase sigma letter.
# Note: The sequence \u00B2 identifies the superscript 2 numeral.

stats.Symbols.PopulationVariance = \u03C3\u00B2

# Population variance estimate symbol (sigma-hat squared).
#
# Note: The sequence \u03C3 identifies the Greek lowercase sigma letter.
# Note: The sequence \u0302 identifies the combining circumflex character.
# Note: The sequence \u00B2 identifies the superscript 2 numeral.

stats.Symbols.PopulationVarianceEstimate = \u03C3\u0302\u00B2

# Sample maximum symbol.

stats.Symbols.SampleMaximum = xmax

# Sample mean symbol (x-bar).
#
# Note: The sequence \u0304 identifies the combining macron character.

stats.Symbols.SampleMean = x\u0304

# Sample minimum symbol.

stats.Symbols.SampleMinimum = xmin

# Sample standard deviation symbol.

stats.Symbols.SampleStandardDeviation = s

# Sample variance symbol.
#
# Note: The sequence \u00B2 identifies the superscript 2 numeral.

stats.Symbols.SampleVariance = s\u00B2

#==============================================================================
# org.facsim.measure package resources.
#==============================================================================

# Manifest attribute not found exception message.
# Arguments:
#   0   Name of attribute that was not found.

util.Manifest.NoSuchElement = Manifest attribute "{0}" was not found.

#==============================================================================
# Test resources.

# These resources, with the exception of "testHelloResource" must not be
# translated and are required for successful execution of the test suite.  They
# should not be referenced except from within the test suite.
#==============================================================================

# Test choice message.  Depending upon numeric value, a different string will
# be reported.

testChoiceResource = {0,choice,0#On your marks...|1#Get set...|2#Go!}

# Test compound resource with 1 argument.

testCompoundResource0 = Test compound resource 0: 0={0}

# Test compound resource with 2 arguments.

testCompoundResource1 = Test compound resource 1: 0={0}, 1={1}

# Test compound resource with 3 arguments.

testCompoundResource2 = Test compound resource 2: 0={0}, 1={1}, 2={2}

# Test resource containing a single date argument.

testDateResource = {0,date,short}

# Test resource for testing localization & internationalization.

testHelloResource = Howdy!

# Test resource containing a single integer argument.

testRealResource = {0,number,#,###.##}

# Test resource with no arguments.

testSingleResource = Test non-compound resource

# Non-string resource.
#
# NOTE: There currently appears to be no way to define resources that aren't
# strings, at least in these .properties files.  Consequently, the test for a
# non-string resource cannot be defined.
#
#testNonStringResource = ?