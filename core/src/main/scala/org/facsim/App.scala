/*
Facsimile -- A Discrete-Event Simulation Library
Copyright Â© 2004-2014, Michael J Allen.

This file is part of Facsimile.

Facsimile is free software: you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option) any
later version.

Facsimile is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
details.

You should have received a copy of the GNU Lesser General Public License along
with Facsimile. If not, see http://www.gnu.org/licenses/lgpl.

The developers welcome all comments, suggestions and offers of assistance. For
further information, please visit the project home page at:

  http://facsim.org/

Thank you for your interest in the Facsimile project!

IMPORTANT NOTE: All patches (modifications to existing files and/or the
addition of new files) submitted for inclusion as part of the official
Facsimile code base, must comply with the published Facsimile Coding Standards.
If your code fails to comply with the standard, then your patches will be
rejected. For further information, please visit the coding standards at:

  http://facsim.org/Documentation/CodingStandards/
===============================================================================
Scala source file from the org.facsim package.
*/
//=============================================================================

package org.facsim

import javafx.application.{Application => JApplication, Platform}
import javafx.stage.Stage
import javafx.scene.image.Image
import org.facsim.util.Manifest
import scala.collection.mutable.ListBuffer

//=============================================================================
/**
Application trait.

Provide common information and functionality for applications built with the
''Facsimile'' library.

`App` employs the common ''Scala cake pattern'' to avoid hard-coding
dependencies and to instead employ
''[[http://en.wikipedia.org/wiki/Dependency_injection dependency injection]]''
to provide access to facilities that may not be available at compile-time. In
order to compile, client applications '''must''' mix-in an
[[org.facsim.AppInformation]]-implementation instance when creating an
application ''object'' from this trait.

The application may utilize a graphical user interface, or be driven from the
command line, or both, depending upon the registered behavior.

@since 0.0
*/
//=============================================================================

trait App
extends DelayedInit {
  self: AppInformation =>

/**
JavaFX application instance.

The application instance is created by ''JavaFX''.
*/

  private final var app: Option [JfxApp] = None // scalastyle:ignore

/**
Buffered subclass construction code.

All classes and objects (but not traits) that extend this trait will have their
construction code packaged up automatically by the ''Scala'' compiler and
passed to the `delayedInit` function, which then stores such code within this
list buffer. When the `main` function is invoked, all of the buffered code is
executed (by invoking the `init` function), in class hierarchy order (that is,
the construction code for a parent class will be executed before the
construction code for its immediate child class, as intuitively expected).

By contrast, traits that extend this trait will always execute their
constructor immediately during construction, in the normal manner, and this do
not have ''delayed initialization''.

The [[scala.DelayedInit]] trait has special behavior that is not entirely
defined by its source code. Refer to the ''Scala API'' documentation for
further details. This is complicated by the fact that, as of ''Scala V2.11'',
the `DelayedInit` trait has been ''deprecated''. There is a replacement
[[https://issues.scala-lang.org/browse/SI-4330 proposal]] to implement an
alternative to `DelayedInit`, but it is (for this use case) less elegant
*/

  private final val subClassCtors = new ListBuffer [() => Unit]

//-----------------------------------------------------------------------------
/**
Buffer subclass construction code.

Buffered subclass construction code is executed when the `main` function
executes.

@note This function is automatically invoked by code generated by the ''Scala''
compiler; it should '''never''' be called directly.

@param ctor Subclass constructor code to be buffered.
*/
//-----------------------------------------------------------------------------

  final override def delayedInit (ctor: => Unit): Unit =
  subClassCtors += (() => ctor)

//-----------------------------------------------------------------------------
/**
Execute buffered subclass construction code.

This function should be invoked from the `main` function during application
initialization only.

@note This method is called on the ''JavaFX Application Thread''.

@param jfxApp The ''JavaFX'' application.
*/
//-----------------------------------------------------------------------------

  private final def init (jfxApp: JfxApp): Unit = {

/*
Store reference to the application.
*/

    synchronized {
      app = Some (jfxApp)
    }

/*
Now construct our subclasses.

Since this happens after the stage has been created, and since we're
constructing these subclasses on the JavaFX Application Thread, they can
populate the JavaFX application's primary stage.
*/

    subClassCtors.foreach (_ ())
  }

//-----------------------------------------------------------------------------
/**
Main function.

Application entry point.

This function parses the command line, configures the application's execution
threads and executes user construction code buffered by the delayedInit method.

@note This function is invoked automatically (provided that this trait has been
implemented within a ''Scala object'') during application startup. This
function must '''never''' be called from user code.

@param args Command line arguments.
*/
//-----------------------------------------------------------------------------

  final def main (args: Array [String]): Unit = {

/*
Create a new JavaFX application.

This function call creates a new instance of our JfxApp class, parses the
command line, creates the primary stage, and initializes subclasses by
executing their constructor code.

An exception is thrown if a JavaFX application has already been launched (for
example, if `main` is invoked manually).

NOTE: The "launch" function does not return until the application has
terminated.
*/

    JApplication.launch (classOf [JfxApp], args: _*)
  }

//-----------------------------------------------------------------------------
/**
Perform clean-up on application exit.

This function provides an opportunity for the application to release resources
and perform miscellaneous clean-up operations when the application exits.  The
default function does nothing; override to perform application-specific
clean-up.

@note This method is called on the ''JavaFX Application Thread''.
*/
//-----------------------------------------------------------------------------

  def onStop (): Unit = {
  }

//-----------------------------------------------------------------------------
/**
Report the application's primary stage.

@note Attempts to modify the primary stage should only be made on the ''JavaFX
Application Thread''.

@return ''JavaFX'' application's primary stage.

@throws java.lang.NoSuchElementException if the ''JavaFX'' application has yet
to be initialized and started.
*/
//-----------------------------------------------------------------------------

  final def primaryStage = app.get.primaryStage

//-----------------------------------------------------------------------------
/**
Report the command line arguments parsed by ''JavaFX''.

@return Set of application parameters, which can be queried and/or validated as
required.

@throws java.lang.NoSuchElementException if the ''JavaFX'' application has yet
to be initialized and started.
*/
//-----------------------------------------------------------------------------

  final def parameters = app.get.getParameters

//-----------------------------------------------------------------------------
/**
Terminate the application.

This function signals to the application that termination has been requested.

By default, ''JavaFX'' applications will also terminate automatically when the
last window has been closed.

@note This method may be called from any thread.
*/
//-----------------------------------------------------------------------------

  final def terminate () = Platform.exit ()

//-----------------------------------------------------------------------------
/**
Retrieve the ''Facsimile'' JAR file manifest.

@return Manifest read from the ''Facsimile'' JAR file.
*/
//-----------------------------------------------------------------------------

  private [facsim] final def facsimileManifest = Manifest (classOf [App])

//-----------------------------------------------------------------------------
/**
JavaFX application class.

This is a helper class, the sole instance of which is created by the JavaFX
runtime. All functions invoked on this instance execute on the main JavaFX
thread.
*/
//-----------------------------------------------------------------------------

  private final class JfxApp
  extends JApplication {

/**
JavaFX application primary stage.

This is created by ''JavaFX'' and passed to the `init` method by the JavaFX
application.
*/

    private var primStage: Option [Stage] = None // scalastyle:ignore

//.............................................................................
/**
Initialize this ''JavaFX'' application.

@note This method is called on the ''JavaFX Application Thread''.

@param stage Application's primary ''JavaFX'' stage.
*/
//.............................................................................

    override def start (stage: Stage): Unit = {

/*
Store the value of the primary stage.
*/

      assert (primStage.isEmpty)
      primStage = Some (stage)

/*
Configure the primary stage.

NOTE: This takes places before the outer class's subclasses have been
constructed. Provided that the application has been mixed-in with a trait that
implements AppInformation (since trait construction will have been completed),
then everything should be OK. However, there could be problems if
AppInformation has been implemented in a class or object (since their
construction will not yet have taken place).

Still, let's see how well this works...
*/

      stage.setTitle (self.title)
      stage.getIcons.addAll (self.icons: _*)

/*
Now initialize our outer class, so that sub-class construction is completed.
*/

      self.init (this)

/*
Show the stage.

TODO: This may be a bad idea for console/text only application invocation.
*/

      stage.show ()
    }

//.............................................................................
/**
Clean-up upon application exit.

@note This method is called on the ''JavaFX Application Thread''.
*/
//.............................................................................

    override def stop (): Unit = self.onStop ()

//.............................................................................
/**
Report the application's primary [[javafx.stage.Stage]].

@return Application's primary stage.

@throws java.lang.NoSuchElementException if the application has yet to start
(i.e. the `start` function has yet to be called) and no primary stage is
available.
*/
//.............................................................................

    def primaryStage = primStage.get
  }
}
